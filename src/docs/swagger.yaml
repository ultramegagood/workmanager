basePath: /v1
definitions:
  example.CreateUserResponse:
    properties:
      code:
        example: 201
        type: integer
      message:
        example: Create user successfully
        type: string
      status:
        example: success
        type: string
      user:
        $ref: '#/definitions/example.User'
    type: object
  example.DeleteUserResponse:
    properties:
      code:
        example: 200
        type: integer
      message:
        example: Delete user successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.DuplicateEmail:
    properties:
      code:
        example: 409
        type: integer
      message:
        example: Email already taken
        type: string
      status:
        example: error
        type: string
    type: object
  example.FailedLogin:
    properties:
      code:
        example: 401
        type: integer
      message:
        example: Invalid email or password
        type: string
      status:
        example: error
        type: string
    type: object
  example.FailedResetPassword:
    properties:
      code:
        example: 401
        type: integer
      message:
        example: Password reset failed
        type: string
      status:
        example: error
        type: string
    type: object
  example.FailedVerifyEmail:
    properties:
      code:
        example: 401
        type: integer
      message:
        example: Verify email failed
        type: string
      status:
        example: error
        type: string
    type: object
  example.Forbidden:
    properties:
      code:
        example: 403
        type: integer
      message:
        example: You don't have permission to access this resource
        type: string
      status:
        example: error
        type: string
    type: object
  example.ForgotPasswordResponse:
    properties:
      code:
        example: 200
        type: integer
      message:
        example: A password reset link has been sent to your email address.
        type: string
      status:
        example: success
        type: string
    type: object
  example.GetAllUserResponse:
    properties:
      code:
        example: 200
        type: integer
      limit:
        example: 10
        type: integer
      message:
        example: Get all users successfully
        type: string
      page:
        example: 1
        type: integer
      results:
        items:
          $ref: '#/definitions/example.User'
        type: array
      status:
        example: success
        type: string
      total_pages:
        example: 1
        type: integer
      total_results:
        example: 1
        type: integer
    type: object
  example.GetUserResponse:
    properties:
      code:
        example: 200
        type: integer
      message:
        example: Get user successfully
        type: string
      status:
        example: success
        type: string
      user:
        $ref: '#/definitions/example.User'
    type: object
  example.HealthCheck:
    properties:
      is_up:
        example: true
        type: boolean
      name:
        example: Postgre
        type: string
      status:
        example: Up
        type: string
    type: object
  example.HealthCheckError:
    properties:
      is_up:
        example: false
        type: boolean
      message:
        example: 'failed to connect to ''host=localhost user=postgres database=wrongdb'':
          server error (FATAL: database "wrongdb" does not exist (SQLSTATE 3D000))'
        type: string
      name:
        example: Postgre
        type: string
      status:
        example: Down
        type: string
    type: object
  example.HealthCheckResponse:
    properties:
      code:
        example: 200
        type: integer
      is_healthy:
        example: true
        type: boolean
      message:
        example: Health check completed
        type: string
      result:
        items:
          $ref: '#/definitions/example.HealthCheck'
        type: array
      status:
        example: success
        type: string
    type: object
  example.HealthCheckResponseError:
    properties:
      code:
        example: 500
        type: integer
      is_healthy:
        example: false
        type: boolean
      message:
        example: Health check completed
        type: string
      result:
        items:
          $ref: '#/definitions/example.HealthCheckError'
        type: array
      status:
        example: error
        type: string
    type: object
  example.LoginResponse:
    properties:
      code:
        example: 200
        type: integer
      message:
        example: Login successfully
        type: string
      status:
        example: success
        type: string
      tokens:
        $ref: '#/definitions/example.Tokens'
      user:
        $ref: '#/definitions/example.User'
    type: object
  example.LogoutResponse:
    properties:
      code:
        example: 200
        type: integer
      message:
        example: Logout successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.NotFound:
    properties:
      code:
        example: 404
        type: integer
      message:
        example: Not found
        type: string
      status:
        example: error
        type: string
    type: object
  example.RefreshToken:
    properties:
      refresh_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        type: string
    type: object
  example.RefreshTokenResponse:
    properties:
      code:
        example: 200
        type: integer
      status:
        example: success
        type: string
      tokens:
        $ref: '#/definitions/example.Tokens'
    type: object
  example.RegisterResponse:
    properties:
      code:
        example: 201
        type: integer
      message:
        example: Register successfully
        type: string
      status:
        example: success
        type: string
      tokens:
        $ref: '#/definitions/example.Tokens'
      user:
        $ref: '#/definitions/example.User'
    type: object
  example.ResetPasswordResponse:
    properties:
      code:
        example: 200
        type: integer
      message:
        example: Update password successfully
        type: string
      status:
        example: success
        type: string
    type: object
  example.SendVerificationEmailResponse:
    properties:
      code:
        example: 200
        type: integer
      message:
        example: Please check your email for a link to verify your account
        type: string
      status:
        example: success
        type: string
    type: object
  example.TokenExpires:
    properties:
      expires:
        example: "2024-10-07T11:56:46.618180553Z"
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        type: string
    type: object
  example.Tokens:
    properties:
      access:
        $ref: '#/definitions/example.TokenExpires'
      refresh:
        $ref: '#/definitions/example.TokenExpires'
    type: object
  example.Unauthorized:
    properties:
      code:
        example: 401
        type: integer
      message:
        example: Please authenticate
        type: string
      status:
        example: error
        type: string
    type: object
  example.UpdateUserResponse:
    properties:
      code:
        example: 200
        type: integer
      message:
        example: Update user successfully
        type: string
      status:
        example: success
        type: string
      user:
        $ref: '#/definitions/example.User'
    type: object
  example.User:
    properties:
      email:
        example: fake@example.com
        type: string
      id:
        example: e088d183-9eea-4a11-8d5d-74d7ec91bdf5
        type: string
      name:
        example: fake name
        type: string
      role:
        example: user
        type: string
      verified_email:
        example: false
        type: boolean
    type: object
  example.VerifyEmailResponse:
    properties:
      code:
        example: 200
        type: integer
      message:
        example: Verify email successfully
        type: string
      status:
        example: success
        type: string
    type: object
  model.Comment:
    properties:
      body:
        type: string
      citate_id:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        type: string
      is_edited:
        type: boolean
      reply_to_id:
        type: string
      task:
        $ref: '#/definitions/model.Task'
      task_id:
        type: string
      updated_at:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/model.User'
        description: Связь с пользователем
      user_id:
        description: Добавляем ID пользователя
        type: string
    type: object
  model.Project:
    properties:
      created_at:
        type: string
      id:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_groups:
        items:
          $ref: '#/definitions/model.UserGroup'
        type: array
      users:
        items:
          $ref: '#/definitions/model.User'
        type: array
    type: object
  model.ProjectPermission:
    properties:
      project:
        $ref: '#/definitions/model.Project'
      project_id:
        type: string
      role:
        type: string
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: string
    type: object
  model.Section:
    properties:
      created_at:
        type: string
      id:
        type: string
      order:
        type: integer
      project:
        $ref: '#/definitions/model.Project'
      project_id:
        type: string
      tasks:
        items:
          $ref: '#/definitions/model.Task'
        type: array
      title:
        type: string
      updated_at:
        type: string
      user_group:
        type: string
    type: object
  model.Task:
    properties:
      assigned_to:
        type: string
      created_at:
        type: string
      description:
        type: string
      due_date:
        type: string
      estimated_time:
        type: integer
      id:
        type: string
      parent_task_id:
        type: string
      priority:
        type: string
      project:
        $ref: '#/definitions/model.Project'
      project_id:
        type: string
      section_id:
        type: string
      spent_time:
        type: integer
      status:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_group:
        type: string
      user_groups:
        items:
          $ref: '#/definitions/model.UserGroup'
        type: array
      user_section_id:
        description: Should match UserSection.ID type
        type: string
      users:
        items:
          $ref: '#/definitions/model.User'
        type: array
    type: object
  model.User:
    properties:
      created_at:
        type: string
      email:
        description: "Уникальный индекс для email\tPassword           string              `gorm:\"not
          null\" json:\"-\"`"
        type: string
      groups:
        items:
          $ref: '#/definitions/model.UserGroup'
        type: array
      id:
        type: string
      name:
        type: string
      password:
        type: string
      project_permissions:
        items:
          $ref: '#/definitions/model.ProjectPermission'
        type: array
      projects:
        items:
          $ref: '#/definitions/model.Project'
        type: array
      role:
        type: string
      tasks:
        items:
          $ref: '#/definitions/model.Task'
        type: array
      updated_at:
        type: string
      verified_email:
        type: boolean
      work_time:
        type: integer
    type: object
  model.UserGroup:
    properties:
      created_at:
        type: string
      id:
        type: string
      owner:
        $ref: '#/definitions/model.User'
      owner_id:
        description: Автор группы
        type: string
      projects:
        items:
          $ref: '#/definitions/model.Project'
        type: array
      tasks:
        items:
          $ref: '#/definitions/model.Task'
        type: array
      team_title:
        type: string
      updated_at:
        type: string
      users:
        items:
          $ref: '#/definitions/model.User'
        type: array
    type: object
  response.Common:
    properties:
      code:
        type: integer
      message:
        type: string
      status:
        type: string
    type: object
  response.ErrorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
      status:
        type: string
    type: object
  response.SuccessWithCurrentUser:
    properties:
      code:
        type: integer
      message:
        type: string
      status:
        type: string
      user:
        $ref: '#/definitions/model.User'
    type: object
  response.SuccessWithData-array_model_User:
    properties:
      code:
        type: integer
      data:
        items:
          $ref: '#/definitions/model.User'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  response.SuccessWithData-model_Comment:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/model.Comment'
      message:
        type: string
      status:
        type: string
    type: object
  response.SuccessWithData-model_Project:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/model.Project'
      message:
        type: string
      status:
        type: string
    type: object
  response.SuccessWithData-model_Section:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/model.Section'
      message:
        type: string
      status:
        type: string
    type: object
  response.SuccessWithData-model_Task:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/model.Task'
      message:
        type: string
      status:
        type: string
    type: object
  response.SuccessWithData-model_UserGroup:
    properties:
      code:
        type: integer
      data:
        $ref: '#/definitions/model.UserGroup'
      message:
        type: string
      status:
        type: string
    type: object
  response.SuccessWithPaginate-model_Project:
    properties:
      code:
        type: integer
      limit:
        type: integer
      message:
        type: string
      page:
        type: integer
      results:
        items:
          $ref: '#/definitions/model.Project'
        type: array
      status:
        type: string
      total_pages:
        type: integer
      total_results:
        type: integer
    type: object
  response.SuccessWithPaginate-model_Section:
    properties:
      code:
        type: integer
      limit:
        type: integer
      message:
        type: string
      page:
        type: integer
      results:
        items:
          $ref: '#/definitions/model.Section'
        type: array
      status:
        type: string
      total_pages:
        type: integer
      total_results:
        type: integer
    type: object
  response.SuccessWithPaginate-model_Task:
    properties:
      code:
        type: integer
      limit:
        type: integer
      message:
        type: string
      page:
        type: integer
      results:
        items:
          $ref: '#/definitions/model.Task'
        type: array
      status:
        type: string
      total_pages:
        type: integer
      total_results:
        type: integer
    type: object
  response.SuccessWithPaginate-model_User:
    properties:
      code:
        type: integer
      limit:
        type: integer
      message:
        type: string
      page:
        type: integer
      results:
        items:
          $ref: '#/definitions/model.User'
        type: array
      status:
        type: string
      total_pages:
        type: integer
      total_results:
        type: integer
    type: object
  response.SuccessWithPaginate-model_UserGroup:
    properties:
      code:
        type: integer
      limit:
        type: integer
      message:
        type: string
      page:
        type: integer
      results:
        items:
          $ref: '#/definitions/model.UserGroup'
        type: array
      status:
        type: string
      total_pages:
        type: integer
      total_results:
        type: integer
    type: object
  validation.AddGroupToProject:
    properties:
      group_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      project_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - group_id
    - project_id
    type: object
  validation.AddGroupToTask:
    properties:
      group_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      task_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - group_id
    - task_id
    type: object
  validation.AddUserToGroup:
    properties:
      user_group_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      user_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - user_group_id
    - user_id
    type: object
  validation.CreateComment:
    properties:
      body:
        example: fake comment
        type: string
      task_id:
        description: Добавил теги
        type: string
    required:
    - body
    - task_id
    type: object
  validation.CreateGroup:
    properties:
      project_id:
        type: string
      task_ids:
        description: Было []string
        items:
          type: string
        type: array
      title:
        example: fake name
        maxLength: 50
        type: string
    required:
    - project_id
    - title
    type: object
  validation.CreateProject:
    properties:
      title:
        example: fake name
        maxLength: 50
        type: string
    required:
    - title
    type: object
  validation.CreateTask:
    properties:
      assigned_to:
        type: string
      description:
        type: string
      parent_task_id:
        description: Если есть parent task
        type: string
      project_id:
        description: Добавил теги
        type: string
      title:
        example: fake task
        maxLength: 50
        type: string
    required:
    - project_id
    - title
    type: object
  validation.CreateUser:
    properties:
      email:
        example: fake@example.com
        maxLength: 50
        type: string
      name:
        example: fake name
        maxLength: 50
        type: string
      password:
        example: password1
        maxLength: 20
        minLength: 8
        type: string
      role:
        enum:
        - user
        - admin
        example: user
        maxLength: 50
        type: string
    required:
    - email
    - name
    - password
    - role
    type: object
  validation.CreateUserGroup:
    properties:
      team_title:
        example: Developers
        maxLength: 100
        type: string
      user_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - team_title
    - user_id
    type: object
  validation.ForgotPassword:
    properties:
      email:
        example: fake@example.com
        maxLength: 50
        type: string
    required:
    - email
    type: object
  validation.GetUsersInGroup:
    properties:
      group_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - group_id
    type: object
  validation.Login:
    properties:
      email:
        example: fake@example.com
        maxLength: 50
        type: string
      password:
        example: password1
        maxLength: 20
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  validation.ReassignTaskValidation:
    properties:
      new_user_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
      task_id:
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
    required:
    - new_user_id
    - task_id
    type: object
  validation.Register:
    properties:
      email:
        example: fake@example.com
        maxLength: 50
        type: string
      name:
        example: fake name
        maxLength: 50
        type: string
      password:
        example: password1
        maxLength: 20
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  validation.UpdatePassOrVerify:
    properties:
      password:
        example: password1
        maxLength: 20
        minLength: 8
        type: string
    type: object
  validation.UpdateUser:
    properties:
      email:
        example: fake@example.com
        maxLength: 50
        type: string
      name:
        example: fake name
        maxLength: 50
        type: string
      password:
        example: password1
        maxLength: 20
        minLength: 8
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  license:
    name: MIT
    url: https://github.com/indrayyana/go-fiber-boilerplate/blob/main/LICENSE
  title: go-fiber-boilerplate API documentation
  version: 1.0.0
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: An email will be sent to reset password.
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.ForgotPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.ForgotPasswordResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
      summary: Forgot password
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.Login'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.LoginResponse'
        "401":
          description: Invalid email or password
          schema:
            $ref: '#/definitions/example.FailedLogin'
      summary: Login
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/example.RefreshToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.LogoutResponse'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
      summary: Logout
      tags:
      - Auth
  /auth/me:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithCurrentUser'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
      security:
      - BearerAuth: []
      summary: Get current user
      tags:
      - Auth
  /auth/refresh-tokens:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/example.RefreshToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.RefreshTokenResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
      summary: Refresh auth tokens
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.Register'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/example.RegisterResponse'
        "409":
          description: Email already taken
          schema:
            $ref: '#/definitions/example.DuplicateEmail'
      summary: Register as user
      tags:
      - Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      parameters:
      - description: The reset password token
        in: query
        name: token
        required: true
        type: string
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.UpdatePassOrVerify'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.ResetPasswordResponse'
        "401":
          description: Password reset failed
          schema:
            $ref: '#/definitions/example.FailedResetPassword'
      summary: Reset password
      tags:
      - Auth
  /auth/send-verification-email:
    post:
      description: An email will be sent to verify email.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.SendVerificationEmailResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
      security:
      - BearerAuth: []
      summary: Send verification email
      tags:
      - Auth
  /auth/verify-email:
    post:
      parameters:
      - description: The verify email token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.VerifyEmailResponse'
        "401":
          description: Verify email failed
          schema:
            $ref: '#/definitions/example.FailedVerifyEmail'
      summary: Verify email
      tags:
      - Auth
  /comments:
    post:
      consumes:
      - application/json
      parameters:
      - description: Create comment
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.CreateComment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithData-model_Comment'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Comment task
      tags:
      - Comments
  /health-check:
    get:
      consumes:
      - application/json
      description: Check the status of services and database connections
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.HealthCheckResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/example.HealthCheckResponseError'
      summary: Health Check
      tags:
      - Health
  /projects:
    get:
      consumes:
      - application/json
      description: Retrieve a list of projects of user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithPaginate-model_Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get projects by user
      tags:
      - Projects
    post:
      consumes:
      - application/json
      description: Create a new project with the provided details.
      parameters:
      - description: Project creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.CreateProject'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithData-model_Project'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new project
      tags:
      - Projects
  /projects/{projectID}/sections:
    get:
      description: Retrieve all sections within a specific project.
      parameters:
      - description: Project ID
        in: path
        name: projectID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithPaginate-model_Section'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get sections of a project
      tags:
      - Sections
  /projects/add-group:
    post:
      consumes:
      - application/json
      description: Add a group to an existing project.
      parameters:
      - description: Add group to project request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.AddGroupToProject'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Common'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add a group to a project
      tags:
      - Projects
  /projects/section:
    post:
      consumes:
      - application/json
      description: Create a new section with the provided details.
      parameters:
      - description: Project section creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.CreateGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithData-model_Section'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new section
      tags:
      - Sections
  /sections/{sectionID}:
    delete:
      description: Delete a section by its unique ID.
      parameters:
      - description: Section ID
        in: path
        name: sectionID
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Common'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete section by ID
      tags:
      - Sections
  /tasks:
    get:
      consumes:
      - application/json
      description: Retrieve a list of tasks.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithPaginate-model_Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get tasks of user
      tags:
      - Tasks
    post:
      consumes:
      - application/json
      description: Create a new task with the provided details.
      parameters:
      - description: Task creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.CreateTask'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithData-model_Task'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new task
      tags:
      - Tasks
    put:
      consumes:
      - application/json
      description: Retrieve a list of users in a specific group.
      parameters:
      - description: Get users in group request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.GetUsersInGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithPaginate-model_User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get users in a group
      tags:
      - Tasks
  /tasks/{taskID}:
    delete:
      description: Delete a task by its unique ID.
      parameters:
      - description: Task ID
        in: path
        name: taskID
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Common'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete task by ID
      tags:
      - Tasks
    get:
      description: Retrieve a task by its unique ID.
      parameters:
      - description: Task ID
        in: path
        name: taskID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithData-model_Task'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get task by ID
      tags:
      - Tasks
  /tasks/{taskID}/reassign:
    put:
      consumes:
      - application/json
      description: Change the assignee of a task and notify via WebSocket.
      parameters:
      - description: Task ID
        in: path
        name: taskID
        required: true
        type: string
      - description: New assignee information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.ReassignTaskValidation'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Common'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Reassign task to a new user
      tags:
      - Tasks
  /tasks/{taskID}/users:
    get:
      description: Retrieve a list of users who have access to a specific task.
      parameters:
      - description: Task ID
        in: path
        name: taskID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithData-array_model_User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get users with access to a task
      tags:
      - Tasks
  /tasks/add-group:
    post:
      consumes:
      - application/json
      description: Добавление группы пользователей на задачу.
      parameters:
      - description: Add group to task request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.AddGroupToTask'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Common'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add a group to a task
      tags:
      - Tasks
  /user-groups:
    get:
      description: Retrieve a list of all user groups.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithPaginate-model_UserGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all user groups
      tags:
      - UserGroups
    post:
      consumes:
      - application/json
      description: Create a new user group with the provided details.
      parameters:
      - description: User group creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.CreateUserGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithData-model_UserGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new user group
      tags:
      - UserGroups
  /user-groups/add-user:
    post:
      consumes:
      - application/json
      description: Add a user to an existing group.
      parameters:
      - description: Add user to group request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.AddUserToGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Common'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Add a user to a group
      tags:
      - UserGroups
  /user-groups/users:
    post:
      consumes:
      - application/json
      description: Retrieve a list of users in a specific group.
      parameters:
      - description: Get users in group request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.GetUsersInGroup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessWithPaginate-model_User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get users in a group
      tags:
      - UserGroups
  /users:
    get:
      description: Only admins can retrieve all users.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Maximum number of users
        in: query
        name: limit
        type: integer
      - description: Search by name or email or role
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.GetAllUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/example.Forbidden'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - Users
    post:
      description: Only admins can create other users.
      parameters:
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/example.CreateUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/example.Forbidden'
        "409":
          description: Email already taken
          schema:
            $ref: '#/definitions/example.DuplicateEmail'
      security:
      - BearerAuth: []
      summary: Create a user
      tags:
      - Users
  /users/{id}:
    delete:
      description: Logged in users can delete only themselves. Only admins can delete
        other users.
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.DeleteUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/example.Forbidden'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - Users
    get:
      description: Logged in users can fetch only their own user information. Only
        admins can fetch other users.
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.GetUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/example.Forbidden'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
      security:
      - BearerAuth: []
      summary: Get a user
      tags:
      - Users
    patch:
      description: Logged in users can only update their own information. Only admins
        can update other users.
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      - description: Request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/validation.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/example.UpdateUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/example.Unauthorized'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/example.Forbidden'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/example.NotFound'
        "409":
          description: Email already taken
          schema:
            $ref: '#/definitions/example.DuplicateEmail'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    description: 'Example Value: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
